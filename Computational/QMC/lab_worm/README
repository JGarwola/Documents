The Worm Algorithm[2] is a Path Integral Monte Carlo[1] 
method to perform simulations of Bose systems in the 
grand canonical ensemble. The configuration space includes 
the "Z sector" (the usual ring polymers of the PIMC representation 
of the grand partition function), and the "G sector", wich
contains also one open polymer and corresponds to the PIMC representation 
of the Matsubara Green function. Diagonal observables are calculated
only in the Z sector, the one-body density matrix is calculated only in
the G sector. In [2] the configurations (the paths) are updated through 
a set of local space-time updates involving the ends of the open path;
here we add updates of closed paths as well.
We can use this code to explore the (rho-T) phase diagram of 4He in 2D [3].

[1] D.M. Ceperley, RMP 67, 279 (1996)
[2] M. Boninsegni, N.V. Prokof'ev, and B.V. Svistunov, PRE 74, 036701 (2006)
[3] M.C. Gordillo and D.M. Ceperley, PRB 58 6447 (1998)


**************************************************************

In this directory you find the following files:

LEGGIMI      # this file

3.pdf        # Ref.[3]

worm.f       # a fortran77 implementation of the WA
worm.h       # a file included by worm.f at compile time
worm.in_4he  # a sample input file for 2D 4He

statforw.f   # a fortran77 code to calculate **weighted** averages,
             # autocorrelations and statistical errors.

             # gnuplot command files to visualize:
               * trace of the block and cumulative averages of
etot.gp           - the energy per particle (redirect stdout to 'worm.out');
np.gp             - the number of particles (redirect stdout to 'worm.out');
rhos.gp           - the superfluid fraction (redirect stdout to 'worm.out');

               * current block and cumulative average of
gofr.gp           - the pair distribution function (file gofr_He);

               * cumulative average of
nofr.gp           - the one-body density matrix;
sofk.gp           - the static structure factor;

coord.gp       * snapshot of the current configuration of the paths;

***********************************************************
************** input description **************************
***********************************************************

This is a sample input for 4He 
(units are K for energy and Angstrom for length):
-----------------------------------------------------------
ndim 2
type He 6.0596
pbc 20 20 
mu He -0.5
ntau 250
restart 0
c0 0.001
temperature 0.5
sofk 14
v2 He He v_He_He hfdhe2
m_bar 20
verme 1000 0 100 1000
-----------------------------------------------------------

Each row of the input file starts with a keyword. 
Each keyword requires a (fixed) numer of arguments, as follows:

keyword ndim
        arg. 1: space dimensionality

keyword type
        arg. 1: the name of a type of particles
        arg. 2: the value of \hbar^2/2m for this this type

keyword pbc
        arg. 1: the side of the simulation box in direction x
        arg. 2: the side of the simulation box in direction y
        ...

keyword mu 
        arg. 1: the name of a type of particles (as given in "type")
        arg. 2: the chemical potential for this type

keyword ntau
        arg. 1: the number of "time" slices

keyword restart
        arg. 1: simulation starts from an empty cell (0) 
                or from restart files of a previous run (1)

keyword c0
        arg. 1: a number which controls the frequency of the
                Z sector vs the G sector (increase/decrease
                this number to favor/hinder the G sector)

keyword temperature
        arg. 1: the temperature

keyword sofk
        arg. 1: the range to calculate the static structure 
                factor S(k)

keyword v2 (specifies the pair potential between type-i and type-j particles)
        arg. 1 name of type-i particles
        arg. 2 name of type-j particles
        arg. 3 output file with the tabulated potential
        arg. 4 keyword to specify which subroutine is used for this potential

keyword m_bar 
        arg. 1 max. number of time slices involved in a move

keyword verme (this must the last keyword and specifies the run) 
        arg. 1 number of blocks
        arg. 2 index of block where averages are reset (to discard equilibration)
        arg. 3 nstp, number of steps per block
        arg. 4 nmoves, number of moves per step 
               (measures are only taken after nmoves moves).

***********************************************************
************ changing parameters on the fly ***************
***********************************************************

Some parameters can be changed during the run by putting the corresponding
keywords-values in a file called 'reset', e.g. the command

   your_prompt$ echo temperature 1.0 > reset

will reset the temperature to 1 starting from the next block.
You can change the values of mu, temperature and c0. When a parameter
is changed, the cumulative averages are reset.

You can also use the 'reset' file to reset the cumulative averages 
without changing any parameter,

   your_prompt$ echo reset > reset

or to stop the run,

   your_prompt$ echo stop > reset


***********************************************************
************** output description *************************
***********************************************************

At the end of each block the code prints 
on the standard output something like this:

---------------------------------------------
 ===>> block            9
advance         9851. 0.322
recede          9774. 0.322
insert            91. 0.044
remove            63. 0.032
open              99. 0.515
close            210. 0.252
wiggle           114. 0.360
swap            9776. 0.297
displace          50. 0.500
swtype             0. 0.000
  0.10000000000E-01  0.20000000000E-01 0.60E-02  0.10000000000E+03 zsector      
 -0.27138599052E+01 -0.80381876347E+00 0.64E+00  0.10000000000E+01 etot         
  0.47295121402E+01  0.60709480259E+01 0.61E+00  0.10000000000E+01 ekin         
 -0.74433720454E+01 -0.68747667894E+01 0.29E+00  0.10000000000E+01 epot         
  0.33000000000E+02  0.33055555556E+02 0.60E+00  0.10000000000E+01 np           
  0.57024000366E-01  0.57120000367E-01 0.10E-02  0.10000000000E+01 rho          
  0.72349972594E+00  0.48175635675E+00 0.33E+00  0.10000000000E+01 rhos_He
---------------------------------------------

(i) the block index
(ii) the number of attempted moves and the acceptance rate 
     for each type of move.
(iii) for various quantities (specified by the string in the last column):
      first column: block average
      second column: cumulative average
      third column: estimated statistical error (assuming independent blocks)
      fourth column: statistical weight of this block average

Furthermore there are some output files:

v_He_He       tabulated potential for the energy (filename specified in input)
gofr          pair distribution function g(|r|) (for each block, block average, 
              cumulative average, estimated error, statistical weight).
              The histogram is on 200 points between 0 and L/2, with L
              the (shortest) side of the simulation box.
nofr          cumulative average of the one-body density matrix n(|r|).
sofk          cumulative average of the static structure factor S(k).
cycles_He     distribution of cycles (for each block: cycle length,
              block average, cumulative average, estimated error, 
              statistical weight).
restart.coord a file which contains coordinates for restart
restart.ind   a file which contains indices for restart


***********************************************************
******************* Miscellaneous *************************
***********************************************************

* To compile:

     your_prompt$ gfortran -O3 worm.f [-o name_of_the_executable]

  (without the -o option the name of the executable is 'a.out';
   without the -O3 option the code will run slower)


* To use a gnuplot command file, say 'np.gp':

     your_prompt$ gnuplot
     gnuplot> l 'np.gp'

  exit with ^C (Control-C), then quit gnuplot


* To redirect the standard output to a file, say 'worm.out'

     your_prompt$ ./a.out | tee worm.out

  (this will send a copy of the output on the standard output and a copy on
  'worm.out').


* Why and how to use statforw.f:

     statforw is similar to statfor, except it calculates WEIGHTED averages;
     it reads TWO columns (i.e. data AND weights), and the output is similar
     to statfor, with the addition of the effective number of points in the 
     weighted average.
     In the Worm Algorithm we need weighted averages because for each block
     any (local or semilocal) physical property must be weighted by the number 
     of configurations of the Z sector visited in that block.

     Compile the code and optionally choose a name for the executable 
     (here statforw.x):

        your_prompt$ gfortran statforw.f -o statforw.x

     Example: We assume we have redirected the standard output of the
     simulation to the file 'worm.out' and we want to calculate mean and 
     statistical error of the energy (the statistical errors given in the 
     output file assume uncorrelated blocks, which may not be the case):

        your_prompt$ grep etot worm.out | awk '{print $1, $4}' | ./statforw.x

     In the above line, the command "grep" selects the lines of file worm.out 
     containing the string "etot", the command "awk" prints the first and 
     fourth columns (block averages and block weights) of the selected lines,
     and the executable "./statforw.x" performs the statistical analysis of
     the given set of data/weigths.


**************************************************************
